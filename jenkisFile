pipeline {
    agent any

    tools { 
        jdk 'JAVA_HOME'
        maven 'M2_HOME'
    }

    environment {
        DB_URL = 'jdbc:mysql://localhost:3306/stationSki'
        NEXUS_REPO_URL = "http://127.0.0.1:8081/repository/maven-releases/"
        MAVEN_SETTINGS = "/usr/share/maven/conf/settings.xml"

        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')

        DOCKER_IMAGE_NAME = 'saifmed/saifmeddeb4twin2'
        DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'saifMeddeb', url: 'https://github.com/anisbm3/skiDevops.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
        }

          stage('Run Unit Tests') {
            steps {
                script {
                    try {
                        sh '''
                            mvn test
                        '''
                    } catch (Exception e) {
                        echo "Tests failed: ${e.message}"
                    }
                }
            }
        }

       stage('SonarQube Analysis') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.token=squ_a00c5e4f4a5e7c215ec4200efcd5e854ef328705 -Dmaven.test.skip=true'
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    try {
                        sh '''
                            mvn deploy --settings ${MAVEN_SETTINGS} -DskipTests
                        '''
                    } catch (Exception e) {
                        echo "Deployment to Nexus failed: ${e.message}"
                        throw e 
                    }
                }
            }
        }

        stage('Docker Login') {
            steps {
                sh 'echo "$DOCKERHUB_CREDENTIALS_PSW" | docker login -u "$DOCKERHUB_CREDENTIALS_USR" --password-stdin'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                sh "docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${DOCKER_IMAGE_NAME}:latest"
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                sh "docker push ${DOCKER_IMAGE_NAME}:latest"
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    sh """
                    sed -i 's|image: saifmed/saifmeddeb4twin2:.*|image: ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}|' docker-compose.yml
                    """

                    sh 'docker-compose down'
                    sh 'docker-compose up -d'
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh 'docker-compose down'
                sh 'docker system prune -f'
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            cleanWs()
        }
        success {
            echo 'üöÄ Pipeline executed successfully!'
        }
        failure {
            echo '‚ùå Pipeline execution failed!'
        }
    }
}
