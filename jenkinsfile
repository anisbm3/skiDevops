pipeline {
    agent any
    environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
         NEXUS_REPO_URL = "http://127.0.0.1:8081/repository/maven-releases/"
        MAVEN_SETTINGS = "/usr/share/maven/conf/settings.xml"

  DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')

        DOCKER_IMAGE_NAME = 'balsemkh/balsemkhouni4twin2g4'
        DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"

    }

    stages {

        stage('Git Checkout') {
            steps {
                git branch: 'BalsemKhouni-4TWIN2-G4', url: 'https://github.com/anisbm3/skiDevops.git'
            }
        }

        stage('Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.token=squ_557a4437011146ccbc6acd256daf9581c8879c9c -Dmaven.test.skip=true'
            }
        }

          stage('Deploy to Nexus') {
            steps {
                script {
                    try {
                        sh '''
                            mvn deploy --settings ${MAVEN_SETTINGS} -DskipTests
                        '''
                    } catch (Exception e) {
                        echo "Deployment to Nexus failed: ${e.message}"
                        throw e
                    }
                }
            }
        }


        stage('Run Unit Tests') {
            steps {
                script {
                    try {
                        sh 'mvn test'
                    } catch (Exception e) {
                        echo "Tests failed: ${e.message}"
                    }
                }
            }
        }

              stage('Docker Login') {
                    steps {
                        sh 'echo "$DOCKERHUB_CREDENTIALS_PSW" | docker login -u "$DOCKERHUB_CREDENTIALS_USR" --password-stdin'
                    }
                }

                stage('Build Docker Image') {
                    steps {
                        sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                        sh "docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${DOCKER_IMAGE_NAME}:latest"
                    }
                }

                stage('Push Docker Image to DockerHub') {
                            steps {
                                sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                                sh "docker push ${DOCKER_IMAGE_NAME}:latest"
                            }
                        }

                        stage('Deploy with Docker Compose') {
                            steps {
                                script {
                                    sh """
                                    sed -i 's|image: balsemkh/balsemkhouni4twin2g4:.*|image: ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}|' docker-compose.yml
                                    """

                                    sh 'docker-compose down'
                                    sh 'docker-compose up -d'
                                }
                            }
                        }

                        stage('Cleanup') {
                            steps {
                                sh 'docker-compose down'
                                sh 'docker system prune -f'
                            }
                        }
                    }


    }
